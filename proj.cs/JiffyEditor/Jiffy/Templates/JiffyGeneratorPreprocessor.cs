// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Jiffy.Templates
{
    using System.Reflection;
    using System.Collections;
    using Jiffy;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\JiffyGeneratorPreprocessor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class JiffyGeneratorPreprocessor : JiffyGeneratorPreprocessorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 7 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\JiffyGeneratorPreprocessor.tt"
 
   if(essence.outputEditorType == GeneratorTypes.CustomEditor)
   {
     GenerateSimpleEditor(essence);
   }
   else if (essence.outputEditorType == GeneratorTypes.PropertyDrawer)
   {
     GeneratePropertyDrawer(essence); 
   }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 4 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

    public void GenerateSimpleEditor(Essence essence)
    {
      WriteLine("using UnityEditor;");
      WriteLine("using UnityEngine;");
      WriteLine(string.Empty);
      WriteLine("[CustomEditor(typeof( " + essence.classType.FullName + " ))]");
      WriteLine("public class " + essence.className + " : Editor");
      WriteLine("{"); 

      if(essence.createContent)
      {
        CreateContent(essence);
      }

      //Space
      WriteLine(string.Empty);
      PrintVariables(essence); 

      //Space
      WriteLine(string.Empty);
      PrintOnEnableFunction(essence); 

      //Space
      WriteLine(string.Empty);
      PrintGUIFunction(essence); 

      PopIndent();
      WriteLine("}");
    }

    public void CreateContent(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);

      WriteLine("public GUIContent m_ScriptContent = new GUIContent(\"Script\")");
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 42 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("public GUIContent ");

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("Content = new GUIContent(\"");

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("\");\r\n");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

      }); 
      PopIndent();
    }

    public void PrintVariables(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);

      WriteLine("/// <summary>");
      WriteLine("/// Type: Monoscript");
      WriteLine("/// <summary>");
      WriteLine("protected SerializedProperty m_Script;");
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 59 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("/// <summary>\r\n/// Type: ");

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.NiceTypeName(info.FieldType)));

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("\r\n/// </summary>\r\nprotected SerializedProperty ");

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 64 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

      }); 
      PopIndent();
    }

    public void PrintOnEnableFunction(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      WriteLine("/// <summary>");
      WriteLine("/// This function is called when the object is loaded.");
      WriteLine("/// We use it to init all our properties");
      WriteLine("/// </summary>");
      WriteLine("protected virtual void OnEnable()");
      WriteLine("{");
      PushIndent(essence.indent);
      WriteLine("m_Script = serializedObject.FindProperty(\"m_Script\");");
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(" = serializedObject.FindProperty(\"");

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("\");\r\n");

        
        #line default
        #line hidden
        
        #line 84 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

      }); 
      PopIndent(); 
      WriteLine("}");
      PopIndent();
    }

    public void PrintGUIFunction(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      WriteLine("/// <summary>");
      WriteLine("/// Inside this function you can add your own custom GUI");
      WriteLine("/// for the inspector of a specific object class.");
      WriteLine("/// </summary>");
      WriteLine("public override void OnInspectorGUI()");
      WriteLine("{");
      PushIndent(essence.indent);
      WriteLine("EditorGUI.BeginChangeCheck();");
      WriteLine("{");
      PushIndent(essence.indent);
      if(essence.createContent)
      {
        WriteLine("EditorGUILayout.PropertyField(m_Script, m_ScriptContent);");
      }
      else
      {
        WriteLine("EditorGUILayout.PropertyField(m_Script);");
      }
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 114 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("\r\nEditorGUILayout.PropertyField( property:");

        
        #line default
        #line hidden
        
        #line 116 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 116 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

        if(essence.createContent) 
        {
            
        
        #line default
        #line hidden
        
        #line 119 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(", label:");

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write("Content");

        
        #line default
        #line hidden
        
        #line 119 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

        }
        if(info.FieldType.IsArray || typeof(IList).IsAssignableFrom(info.FieldType))
        {
          
        
        #line default
        #line hidden
        
        #line 123 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(", includeChildren:true");

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

        }
        
        
        #line default
        #line hidden
        
        #line 125 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimpleEditor.t4"

      }); 
      PopIndent(); 
      WriteLine("}");
      WriteLine("if(EditorGUI.EndChangeCheck())");
      WriteLine("{");
      PushIndent(essence.indent);
      WriteLine("serializedObject.ApplyModifiedProperties();");
      PopIndent(); 
      WriteLine("}");
      PopIndent(); 
      WriteLine("}");
    }

        
        #line default
        #line hidden
        
        #line 3 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

    public void GeneratePropertyDrawer(Jiffy.Essence essence)
    {
      WriteLine("using UnityEditor;");
      WriteLine("using UnityEngine;");
      WriteLine(string.Empty);
      WriteLine("[CustomPropertyDrawer(typeof( " + essence.classType.FullName + " ))]");
      WriteLine("public class " + essence.className + " : PropertyDrawer");
      WriteLine("{"); 

      if(essence.createContent)
      {
        PDContent(essence);
      }

      //Space
      WriteLine(string.Empty);
      PDVariable(essence); 

      //Space
      WriteLine(string.Empty);
      PDPopulateSP(essence); 

      //Space
      WriteLine(string.Empty);
      PDPropertyHeight(essence); 

      //Space
      WriteLine(string.Empty);
      PDOnGUI(essence); 

      PopIndent();
      WriteLine("}");
    }

    public void PDContent(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);

      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("public GUIContent ");

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("Content = new GUIContent(\"");

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("\");\r\n");

        
        #line default
        #line hidden
        
        #line 46 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

      }); 
      PopIndent();
    }

    public void PDPopulateSP(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      WriteLine("/// <summary>");
      WriteLine("/// Since PropertyDrawers are shared (they create one instance for many items) we can't");
      WriteLine("/// store any local variables. This means that everytime we are setn a property we need");
      WriteLine("/// to repopulate the SerializedProperties. This function does that.");
      WriteLine("/// </summary>");
      WriteLine("public void PopulateProperties(SerializedProperty property)");
      WriteLine("{");
      PushIndent(essence.indent);
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(" = property.FindPropertyRelative(\"");

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("\"); \r\n");

        
        #line default
        #line hidden
        
        #line 66 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

      }); 
      PopIndent();
      WriteLine("}");
      PopIndent(); 
    }

    public void PDVariable(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 78 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("/// <summary>\r\n/// Type: ");

        
        #line default
        #line hidden
        
        #line 80 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.NiceTypeName(info.FieldType)));

        
        #line default
        #line hidden
        
        #line 80 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("\r\n/// </summary>\r\nprotected SerializedProperty ");

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 83 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

      }); 
      PopIndent();
    }

    public void PDPropertyHeight(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      WriteLine("/// <summary>");
      WriteLine("/// This property is used to set how much height space we are given to draw our inspector.");
      WriteLine("/// We use the helper function to get the height because other property drawers can change");
      WriteLine("/// the required height");
      WriteLine("/// </summary>");
      WriteLine("public override float GetPropertyHeight(SerializedProperty property, GUIContent label)");
      WriteLine("{");
      PushIndent(essence.indent);
      WriteLine("PopulateProperties(property);"); 
      WriteLine(string.Empty);
      WriteLine("float height = 0f;");
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("height += EditorGUI.GetPropertyHeight(");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("); \r\n");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

      }); 
      WriteLine("return height;"); 
      PopIndent();
      WriteLine("}"); 
      PopIndent();
    }

    public void PDOnGUI(Jiffy.Essence essence)
    {
      PushIndent(essence.indent);
      WriteLine("/// <summary>");
      WriteLine("/// Inside this function you can add your own custom GUI");
      WriteLine("/// for the inspector of a specific object class.");
      WriteLine("/// </summary>");
      WriteLine("public override void OnGUI(Rect position, SerializedProperty property, GUIContent label)");
      WriteLine("{");
      PushIndent(essence.indent);
      WriteLine("PopulateProperties(property);"); 
      WriteLine(string.Empty);
      WriteLine("position.height = EditorGUIUtility.singleLineHeight;");
      WriteLine(string.Empty);
      essence.Foreach( (FieldInfo info) => 
      { 

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("EditorGUI.PropertyField( position:position, property:");

        
        #line default
        #line hidden
        
        #line 131 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 131 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

        if(essence.createContent) 
        {
            
        
        #line default
        #line hidden
        
        #line 134 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(", label:");

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(this.ToStringHelper.ToStringWithCulture(info.Name));

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write("Content");

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

        }
        if(info.FieldType.IsArray || typeof(IList).IsAssignableFrom(info.FieldType))
        {
          
        
        #line default
        #line hidden
        
        #line 138 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(", includeChildren:true");

        
        #line default
        #line hidden
        
        #line 138 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"

        }
        
        
        #line default
        #line hidden
        
        #line 140 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 141 "C:\Users\Byron\Documents\jiffy-editor\proj.cs\JiffyEditor\Jiffy\Templates\Generators\SimplePropertyDrawer.t4"


        WriteLine("position.y += EditorGUIUtility.singleLineHeight;");
        WriteLine(string.Empty);
      }); 
      PopIndent(); 
      WriteLine("}");
    }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class JiffyGeneratorPreprocessorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
