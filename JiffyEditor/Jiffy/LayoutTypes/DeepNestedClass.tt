<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ include file="$(SolutionDir)JiffyEditor\Jiffy\UnityFieldInfo.tt"#>
<#@ include file="$(SolutionDir)JiffyEditor\Jiffy\MultiOutputExtensions.tt"#>
<#+
public void DrawDeepNestedClass(UnityFieldInfo info, SharedData sharedData)
{
  bool isRoot = info.field == null;
  if(!isRoot)
  {

    if(info.childCount == 0)
    {
      WriteLine("public SerializedProperty "+ info.field.Name + ";");
      return;
    }

    WriteLine("public d" + info.field.FieldType.Name + " " + info.field.Name + ";");  

    if(!isRoot)
    {
      PushWriter();
    }


    //With nested classes we have to generate them. This function checks if we have
    //already generated one for this type. 
    if( sharedData.writtenClassTypes.Contains(info.field.FieldType) )
    {
      return;
    }

    //If not we add it here
    sharedData.writtenClassTypes.Add(info.field.FieldType);
    WriteLine("public class " +  info.field.FieldType.Name);
    WriteLine("{"); 
    PushIndent(sharedData.indent);
    WriteLine("public SerializedProperty value;"); 
  }

  for(int i = 0; i < info.childCount; i++)
  {
    DrawDeepNestedClass(info.children[i], sharedData);
  }


  if(!isRoot)
  {
#region -= Constructor =-
   WriteLine("public " + info.field.FieldType.Name + "(SerializedProperty property)");
   WriteLine("{");
   PushIndent(sharedData.indent);
   {
    for(int i = 0; i < info.childCount; i++)
    {
       WriteLine( info.children[i].name + " = property.FindPropertyRelative(\"" + info.children[i].name + "\");");
    }
   }
   PopIndent();
   WriteLine("}");
#endregion 

#region -= Implicit Operators =-
   //Draw the operators SerializedProperty -> @Class
   WriteLine("public static implicit operator SerializedProperty(" + info.field.FieldType.Name + " @class)");
   WriteLine("{");
   PushIndent(sharedData.indent);
   WriteLine("return @class.value;");
   PopIndent();
   WriteLine("}");

   //Draw the operators @Class -> SerializedProperty
   WriteLine("public static implicit operator " + info.field.FieldType.Name + "(SerializedProperty property)");
   WriteLine("{");
   PushIndent(sharedData.indent);
   WriteLine("return new " + info.field.FieldType.Name + "(property);");
   PopIndent();
   WriteLine("}");
#endregion 
  }
  PopIndent();
  if(!isRoot)
  {
    WriteLine("}");
    PopWriter();
  }
}
 #>
<#+
public static string TypeName (Type type)
{
   if(type.DeclaringType == null)
      return type.Name;

   return TypeName(type.DeclaringType) + "." + type.Name;
}
#>