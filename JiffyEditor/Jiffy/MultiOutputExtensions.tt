<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
  void SaveOutput(string outputFileName)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 

      this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
  }

  void SaveBuilder(string outputFileName, StringBuilder builder)
  {
      string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
      string outputFilePath = Path.Combine(templateDirectory, outputFileName);
      File.WriteAllText(outputFilePath, builder.ToString()); 

      builder.Remove(0, builder.Length);
  }

  Dictionary<string,StringBuilder> writerDictionary;

  void SwitchWriter(string name)
  {
    if(writerDictionary == null)
    {
      writerDictionary = new Dictionary<string,StringBuilder>();
      writerDictionary.Add("", this.GenerationEnvironment);
    }
    if(!writerDictionary.ContainsKey(name))
    {
      writerDictionary.Add(name, new StringBuilder()); 
    }

    this.GenerationEnvironment = writerDictionary[name];
  }

  void OuputWriters()
  {
    foreach(var pair in writerDictionary)
    {
       SaveBuilder(pair.Key + "Drawer.cs", pair.Value);
    }
  }

  List<StringBuilder> writers;

  public void PushWriter()
  {
    if(writers == null)
    {
      writers = new List<StringBuilder>();
      writers.Add(this.GenerationEnvironment); 
    }

    this.GenerationEnvironment = new StringBuilder();
    writers.Add(this.GenerationEnvironment);
  }

  public void PopWriter()
  {
    SaveBuilder("Temp-" + (writers.Count - 1).ToString(), writers[writers.Count - 1]); 
    writers.RemoveAt(writers.Count - 1);
    this.GenerationEnvironment = writers[writers.Count - 1];
  }
#>